1 运行以下命令安装所需的包（package）：

npm install --save-dev @babel/core @babel/cli @babel/preset-env


2 在项目的根目录下创建一个命名为 babel.config.json 的配置文件（需要 v7.8.0 或更高版本），并将以下内容复制到此文件中：
“usage”: 不需要手动在代码里写import‘@babel/polyfilll’，打包时会自动根据实际代码的使用情况，结合 targets 引入代码里实际用到 部分 polyfilll 模块


{
  "presets": [
    [
      "@babel/env",
      {
        "targets": {
          "edge": "17",
          "firefox": "60",
          "chrome": "67",
          "safari": "11.1"
        },
        "useBuiltIns": "usage",
        "corejs": "3.6.5"
      }
    ]
  ]
}

2 如果你使用的是 Babel 的旧版本，则文件名为 babel.config.js。

const presets = [
  [
    "@babel/env",
    {
      targets: {
        edge: "17",
        firefox: "60",
        chrome: "67",
        safari: "11.1",
      },
      useBuiltIns: "usage",
      corejs: "3.6.4",
    },
  ],
];

module.exports = { presets };

3 运行此命令将 src 目录下的所有代码编译到 lib 目录：

.\node_modules\.bin\babel src --out-dir lib --presets=@babel/env

--这将解析 src 目录下的所有 JavaScript 文件，并应用我们所指定的代码转换功能(@babel/preset-env
--)，然后把每个文件输出到 lib 目录下
--polyfill的库。因为它是由其他两个库实现的，直接引入其他两个库即可，所以已被废弃。
--  // 实现 @babel/polyfill 等同效果
  --import 'core-js/stable'
 -- import 'regenerator-runtime/runtime'

